generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Opportunity {
  id                        String    @db.VarChar @unique
  title                     String    @db.VarChar
  description               String?   @db.VarChar
  posteddate                DateTime? @db.Date
  archivedate               DateTime? @db.Date
  naicscode                 String?   @db.VarChar
  naicscodes                String?   @db.VarChar
  typeofsetaside            String?   @db.VarChar
  typeofsetasidedescription String?   @db.VarChar
  noticeid                  String?   @db.VarChar
  solicitationnumber        String?   @db.VarChar
  fullparentpathname        String?   @db.VarChar
  fullparentpathcode        String?   @db.VarChar
  type_op                   String?   @db.VarChar
  basetype_op               String?   @db.VarChar
  archivetype               String?   @db.VarChar
  classificationcode        String?   @db.VarChar
  pointofcontactname        String?   @db.VarChar
  pointofcontactemail       String?   @db.VarChar
  pointofcontactphone       String?   @db.VarChar
  placeofperformancecity    String?   @db.VarChar
  placeofperformancestate   String?   @db.VarChar
  placeofperformancezip     String?   @db.VarChar
  placeofperformancecountry String?   @db.VarChar
  ulink                     String?   @db.VarChar
  ranking_process_flag      String?   @db.VarChar

  @@map("oppstable")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ClientInfo {
  client_short_name String @db.VarChar
  client_raw_text   String
  id                Int    @unique @default(autoincrement()) @db.SmallInt

  @@map("oppclientinfo")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Clients {
  id                Int      @unique @default(autoincrement()) @db.SmallInt
  client_short_name String?  @db.VarChar
  client_long_name  String?  @db.VarChar
  status            Boolean?

  @@map("oppclientlist")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model OpportunityTableInfo {
  opps_id       String @db.VarChar
  opps_raw_text String
  id            Int    @unique @default(autoincrement()) @db.SmallInt

  @@map("oppstableinfo")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model OpportunityTempStore {
  record_identifier String  @db.VarChar
  raw_text          String
  id                Int     @unique @default(autoincrement()) @db.SmallInt
  record_type       String? @db.VarChar

  @@map("oppstempstore")
}

model Rankings {
  opps_id           String   @db.VarChar
  client_short_name String?  @db.VarChar
  score             Decimal? @db.Decimal
  id                Int      @unique(map: "oppsclientranking_id_idx") @default(autoincrement()) @db.SmallInt

  @@map("oppsclientranking")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  client        String
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
